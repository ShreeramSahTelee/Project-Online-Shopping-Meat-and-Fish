package com.shopping.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.shopping.dto.UserDto;
import com.shopping.entity.User;
import com.shopping.service.UserService;

@RestController
@RequestMapping("/api/v1/user")
@EnableEurekaClient
public class UserController {
	@Autowired
	UserService userService;
	@PostMapping("/adduser")
	public ResponseEntity<UserDto> addUser(@RequestBody UserDto userDto){
		return new ResponseEntity<UserDto>(userService.addUser(userDto),HttpStatus.OK);
	}
	@GetMapping("/users")
	public ResponseEntity<List<UserDto>> getAllUser(){
		return new ResponseEntity<List<UserDto>>(userService.getAllUser(),HttpStatus.OK);
	}
	@GetMapping("/user/{id}")
   public ResponseEntity<UserDto> getUserById(@PathVariable int id){
	   return new ResponseEntity<UserDto>(userService.getUserById(id),HttpStatus.OK);
   }
	@PutMapping("/updateuser/{id}")
	public ResponseEntity<UserDto> updateUserById(@PathVariable int id,@RequestBody UserDto userDto){
		return new ResponseEntity<UserDto>(userService.updateUserById(id, userDto),HttpStatus.OK);
	}
	@DeleteMapping("/deleteuser/{id}")
	public ResponseEntity<String> deleteUserById(@PathVariable int id){
		return new ResponseEntity<String> (userService.deleteUserById(id),HttpStatus.OK);
	}
//	public ResponseEntity<User> getUserByUserName(@PathVariable String userName){
//		return new ResponseEntity<User>(userService.
//	}
}
