package com.shopping.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.naming.NameNotFoundException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.shopping.dto.UserDto;
import com.shopping.entity.User;
import com.shopping.exception.IdNotFoundException;
import com.shopping.repository.UserRepository;
import com.shopping.utility.AppConstant;
@Service
public class UserServiceImpl implements UserService{
   @Autowired
	UserRepository userRepository;
	@Override
	public UserDto addUser(UserDto userDto) {
		return convertToDto(userRepository.save(convertToEntity(userDto)));
	}

	@Override
	public List<UserDto> getAllUser() {
		
	List<User> users=userRepository.findAll();
	List<UserDto> userDtos=new ArrayList<>();
	for(User user:users) {
		userDtos.add(convertToDto(user));
	}
	return userDtos;
	}

	@Override
	public UserDto getUserById(int id) {
		Optional<User> optUser=userRepository.findById(id);
		if(optUser.isPresent()) {
			return convertToDto(optUser.get());
		}
		else {
			throw new IdNotFoundException(AppConstant.ID_NOT_FOUND_MESSAGE);
		}
		
	}
	

	@Override
	public UserDto updateUserById(int id, UserDto userDto) {
		Optional<User> optUser=userRepository.findById(id);
		if(optUser.isPresent()) {
			return convertToDto(userRepository.save(convertToEntity(userDto)));
		}else {
			throw new IdNotFoundException(AppConstant.ID_NOT_FOUND_MESSAGE);
		}
		
	}

	@Override
	public String deleteUserById(int id) {
		Optional<User> optUser=userRepository.findById(id);
		if(optUser.isPresent()) {
			userRepository.deleteById(id);
			return "Id is deleted";
		}
		else {
			throw new IdNotFoundException(AppConstant.ID_NOT_FOUND_MESSAGE);
		}
	}
	
	public List<User> getUserByUserName(String userName) {
	 return userRepository.getUserByUserName(userName);
	}
	
	private UserDto convertToDto(User user) {
		UserDto userDto=new UserDto();
		userDto.setId(user.getId());
		userDto.setUserName(user.getUserName());
		userDto.setUserNumber(user.getUserNumber());
		userDto.setUserEmail(user.getUserEmail());
		userDto.setUserAddress(user.getUserAddress());
		userDto.setUserType(user.getUserType());
		userDto.setUserPassword(user.getUserPassword());
		return userDto;
	}
	private User convertToEntity(UserDto userDto) {
		User user=new User();
		user.setId(userDto.getId());
		user.setUserName(userDto.getUserName());
		user.setUserNumber(userDto.getUserNumber());
		user.setUserEmail(userDto.getUserEmail());
		user.setUserAddress(userDto.getUserAddress());
		user.setUserType(userDto.getUserType());
		user.setUserPassword(userDto.getUserPassword());
		return user;
	}

	

}
